//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Player/GameControls/ControlsForBuilding.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlsForBuilding : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlsForBuilding()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlsForBuilding"",
    ""maps"": [
        {
            ""name"": ""NotMovementActions"",
            ""id"": ""17c05d34-be15-4bad-8109-a86a148e190a"",
            ""actions"": [
                {
                    ""name"": ""EnableBuildingMode"",
                    ""type"": ""Button"",
                    ""id"": ""d66bee28-a4c3-4e16-b55a-535a8c0de479"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dfafcd1c-fcc6-4b3e-ad23-6041d6ade650"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableBuildingMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b81557ea-96c8-427a-991a-e8946872f897"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableBuildingMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // NotMovementActions
        m_NotMovementActions = asset.FindActionMap("NotMovementActions", throwIfNotFound: true);
        m_NotMovementActions_EnableBuildingMode = m_NotMovementActions.FindAction("EnableBuildingMode", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // NotMovementActions
    private readonly InputActionMap m_NotMovementActions;
    private INotMovementActionsActions m_NotMovementActionsActionsCallbackInterface;
    private readonly InputAction m_NotMovementActions_EnableBuildingMode;
    public struct NotMovementActionsActions
    {
        private @ControlsForBuilding m_Wrapper;
        public NotMovementActionsActions(@ControlsForBuilding wrapper) { m_Wrapper = wrapper; }
        public InputAction @EnableBuildingMode => m_Wrapper.m_NotMovementActions_EnableBuildingMode;
        public InputActionMap Get() { return m_Wrapper.m_NotMovementActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NotMovementActionsActions set) { return set.Get(); }
        public void SetCallbacks(INotMovementActionsActions instance)
        {
            if (m_Wrapper.m_NotMovementActionsActionsCallbackInterface != null)
            {
                @EnableBuildingMode.started -= m_Wrapper.m_NotMovementActionsActionsCallbackInterface.OnEnableBuildingMode;
                @EnableBuildingMode.performed -= m_Wrapper.m_NotMovementActionsActionsCallbackInterface.OnEnableBuildingMode;
                @EnableBuildingMode.canceled -= m_Wrapper.m_NotMovementActionsActionsCallbackInterface.OnEnableBuildingMode;
            }
            m_Wrapper.m_NotMovementActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @EnableBuildingMode.started += instance.OnEnableBuildingMode;
                @EnableBuildingMode.performed += instance.OnEnableBuildingMode;
                @EnableBuildingMode.canceled += instance.OnEnableBuildingMode;
            }
        }
    }
    public NotMovementActionsActions @NotMovementActions => new NotMovementActionsActions(this);
    public interface INotMovementActionsActions
    {
        void OnEnableBuildingMode(InputAction.CallbackContext context);
    }
}
