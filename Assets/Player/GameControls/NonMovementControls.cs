//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Player/GameControls/NonMovementControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NonMovementControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NonMovementControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NonMovementControls"",
    ""maps"": [
        {
            ""name"": ""NotMovementActions"",
            ""id"": ""17c05d34-be15-4bad-8109-a86a148e190a"",
            ""actions"": [
                {
                    ""name"": ""EnableBuildingMode"",
                    ""type"": ""Button"",
                    ""id"": ""d66bee28-a4c3-4e16-b55a-535a8c0de479"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c0bc0caf-615d-458b-9ea7-e05a0902136a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceObject"",
                    ""type"": ""Button"",
                    ""id"": ""acb8acde-66c7-47e4-a60e-d1d2ca275738"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateObject"",
                    ""type"": ""Button"",
                    ""id"": ""7b2a314c-468f-4685-9873-ea37106a2b51"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dfafcd1c-fcc6-4b3e-ad23-6041d6ade650"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableBuildingMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b81557ea-96c8-427a-991a-e8946872f897"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableBuildingMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21ebc578-6236-4295-9943-66543c7f3bef"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e50c869d-e60a-44dc-a97b-b78fa9e7b59d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18457da1-80ae-4a1b-9c2c-533b231e58da"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // NotMovementActions
        m_NotMovementActions = asset.FindActionMap("NotMovementActions", throwIfNotFound: true);
        m_NotMovementActions_EnableBuildingMode = m_NotMovementActions.FindAction("EnableBuildingMode", throwIfNotFound: true);
        m_NotMovementActions_Switch = m_NotMovementActions.FindAction("Switch", throwIfNotFound: true);
        m_NotMovementActions_PlaceObject = m_NotMovementActions.FindAction("PlaceObject", throwIfNotFound: true);
        m_NotMovementActions_RotateObject = m_NotMovementActions.FindAction("RotateObject", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // NotMovementActions
    private readonly InputActionMap m_NotMovementActions;
    private INotMovementActionsActions m_NotMovementActionsActionsCallbackInterface;
    private readonly InputAction m_NotMovementActions_EnableBuildingMode;
    private readonly InputAction m_NotMovementActions_Switch;
    private readonly InputAction m_NotMovementActions_PlaceObject;
    private readonly InputAction m_NotMovementActions_RotateObject;
    public struct NotMovementActionsActions
    {
        private @NonMovementControls m_Wrapper;
        public NotMovementActionsActions(@NonMovementControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @EnableBuildingMode => m_Wrapper.m_NotMovementActions_EnableBuildingMode;
        public InputAction @Switch => m_Wrapper.m_NotMovementActions_Switch;
        public InputAction @PlaceObject => m_Wrapper.m_NotMovementActions_PlaceObject;
        public InputAction @RotateObject => m_Wrapper.m_NotMovementActions_RotateObject;
        public InputActionMap Get() { return m_Wrapper.m_NotMovementActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NotMovementActionsActions set) { return set.Get(); }
        public void SetCallbacks(INotMovementActionsActions instance)
        {
            if (m_Wrapper.m_NotMovementActionsActionsCallbackInterface != null)
            {
                @EnableBuildingMode.started -= m_Wrapper.m_NotMovementActionsActionsCallbackInterface.OnEnableBuildingMode;
                @EnableBuildingMode.performed -= m_Wrapper.m_NotMovementActionsActionsCallbackInterface.OnEnableBuildingMode;
                @EnableBuildingMode.canceled -= m_Wrapper.m_NotMovementActionsActionsCallbackInterface.OnEnableBuildingMode;
                @Switch.started -= m_Wrapper.m_NotMovementActionsActionsCallbackInterface.OnSwitch;
                @Switch.performed -= m_Wrapper.m_NotMovementActionsActionsCallbackInterface.OnSwitch;
                @Switch.canceled -= m_Wrapper.m_NotMovementActionsActionsCallbackInterface.OnSwitch;
                @PlaceObject.started -= m_Wrapper.m_NotMovementActionsActionsCallbackInterface.OnPlaceObject;
                @PlaceObject.performed -= m_Wrapper.m_NotMovementActionsActionsCallbackInterface.OnPlaceObject;
                @PlaceObject.canceled -= m_Wrapper.m_NotMovementActionsActionsCallbackInterface.OnPlaceObject;
                @RotateObject.started -= m_Wrapper.m_NotMovementActionsActionsCallbackInterface.OnRotateObject;
                @RotateObject.performed -= m_Wrapper.m_NotMovementActionsActionsCallbackInterface.OnRotateObject;
                @RotateObject.canceled -= m_Wrapper.m_NotMovementActionsActionsCallbackInterface.OnRotateObject;
            }
            m_Wrapper.m_NotMovementActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @EnableBuildingMode.started += instance.OnEnableBuildingMode;
                @EnableBuildingMode.performed += instance.OnEnableBuildingMode;
                @EnableBuildingMode.canceled += instance.OnEnableBuildingMode;
                @Switch.started += instance.OnSwitch;
                @Switch.performed += instance.OnSwitch;
                @Switch.canceled += instance.OnSwitch;
                @PlaceObject.started += instance.OnPlaceObject;
                @PlaceObject.performed += instance.OnPlaceObject;
                @PlaceObject.canceled += instance.OnPlaceObject;
                @RotateObject.started += instance.OnRotateObject;
                @RotateObject.performed += instance.OnRotateObject;
                @RotateObject.canceled += instance.OnRotateObject;
            }
        }
    }
    public NotMovementActionsActions @NotMovementActions => new NotMovementActionsActions(this);
    public interface INotMovementActionsActions
    {
        void OnEnableBuildingMode(InputAction.CallbackContext context);
        void OnSwitch(InputAction.CallbackContext context);
        void OnPlaceObject(InputAction.CallbackContext context);
        void OnRotateObject(InputAction.CallbackContext context);
    }
}
